

# This file was *autogenerated* from the file encryption.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1024 = Integer(1024); _sage_const_128 = Integer(128); _sage_const_10 = Integer(10); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_7 = Integer(7); _sage_const_0 = Integer(0); _sage_const_3635799973808409611026462499791853056347787880401409846846897007394027540113672723180932404455112025261825058799881611289361506461931437343506657847258370039165636668020861611608939866398460475542081667812695583802631738720701449751571536827757098218966022321170840433823413609544310552632172896702650238675727192585205267978099032925253664406618596213525271931979397150216821867241355757444885551327113019508984098058818840197080615639994763731677416512808546290949494954067936918853234685463415933904385502839709839952776567297839382999157603133728424807260893761505964353739784806002565476997552890385088770586257 = Integer(3635799973808409611026462499791853056347787880401409846846897007394027540113672723180932404455112025261825058799881611289361506461931437343506657847258370039165636668020861611608939866398460475542081667812695583802631738720701449751571536827757098218966022321170840433823413609544310552632172896702650238675727192585205267978099032925253664406618596213525271931979397150216821867241355757444885551327113019508984098058818840197080615639994763731677416512808546290949494954067936918853234685463415933904385502839709839952776567297839382999157603133728424807260893761505964353739784806002565476997552890385088770586257); _sage_const_9449293455061644130034467964572111063093263208106376095328599306321991490339662645115460783028457458390775108834224045745389139241355867569728535706420654890970655486515208889330439710301717180599762027291802822808167826432330531712507591279834459322632490997021726605793983183647693039323476767950476397389468983587140110174468850434852576325344271042771471537926071968033948289983503695564007169945862656055511234123343702866291955449954371421106982182169116313775969853284192212291642159375020916182553620532440566998772889629862867606563179920765675400050964094016736699362526488424536502396479405673274296875535 = Integer(9449293455061644130034467964572111063093263208106376095328599306321991490339662645115460783028457458390775108834224045745389139241355867569728535706420654890970655486515208889330439710301717180599762027291802822808167826432330531712507591279834459322632490997021726605793983183647693039323476767950476397389468983587140110174468850434852576325344271042771471537926071968033948289983503695564007169945862656055511234123343702866291955449954371421106982182169116313775969853284192212291642159375020916182553620532440566998772889629862867606563179920765675400050964094016736699362526488424536502396479405673274296875535); _sage_const_72722541732948422043294541293089183164959988239906966657210349268352275440075783150806655737017959343422931402799253621857107502292878646436446373033860654646327644849581545067903796757450933928853514982454555297596242771909750116730749245771798107858268364553003553367869432847460707418805820268093010893253839660324489678816678674493384367919784210585648351935063005661630060961092937826703335808008533356377212241961280695888996283288172202782497742618467851042880478056624347488496635252829186794587016567118910702482014897423269267952492532861696012245436385304372601330045433038761644074520161187999313822046 = Integer(72722541732948422043294541293089183164959988239906966657210349268352275440075783150806655737017959343422931402799253621857107502292878646436446373033860654646327644849581545067903796757450933928853514982454555297596242771909750116730749245771798107858268364553003553367869432847460707418805820268093010893253839660324489678816678674493384367919784210585648351935063005661630060961092937826703335808008533356377212241961280695888996283288172202782497742618467851042880478056624347488496635252829186794587016567118910702482014897423269267952492532861696012245436385304372601330045433038761644074520161187999313822046); _sage_const_5886216022986182941051300006073347189910435315944873215138912648196316225666065705085335034310363392472372981437141688077884740281717308872658324232196145506451346463343928822789403640660707638986533874461561794303132330483538832077666803697849159211524737040403889725338439006950843194110109691515919169606995630662259331875186496184092296286645459039831847957881737823478756483703240875945824954426758169902904348306486143365100336093247779892212063411979037873869355377272879640926904109164434169072755134259849637748478337229446753875358069319898946605035506717815144946952787115460732669473446676476184840111324 = Integer(5886216022986182941051300006073347189910435315944873215138912648196316225666065705085335034310363392472372981437141688077884740281717308872658324232196145506451346463343928822789403640660707638986533874461561794303132330483538832077666803697849159211524737040403889725338439006950843194110109691515919169606995630662259331875186496184092296286645459039831847957881737823478756483703240875945824954426758169902904348306486143365100336093247779892212063411979037873869355377272879640926904109164434169072755134259849637748478337229446753875358069319898946605035506717815144946952787115460732669473446676476184840111324); _sage_const_9522015996794592552077762505865200246258223196346283061985809655590343765779738428266267438765475417734198040237023299367246246743648746216164982079454515545616983131364790434398343507059168114528615542274257378105764069204240281829238340525606257430490759361574730159161852616495153746742282588218569408282722823247464599853285529109345960693264055253357119889861134973695578350944596633390710505753871189411888446365304983562180951733242543623889479924787584164818850331340816559780138794627850102977140637099559477701254904527286136874515672453627371412296400479321109300692571921463298146470999566861273610697581 = Integer(9522015996794592552077762505865200246258223196346283061985809655590343765779738428266267438765475417734198040237023299367246246743648746216164982079454515545616983131364790434398343507059168114528615542274257378105764069204240281829238340525606257430490759361574730159161852616495153746742282588218569408282722823247464599853285529109345960693264055253357119889861134973695578350944596633390710505753871189411888446365304983562180951733242543623889479924787584164818850331340816559780138794627850102977140637099559477701254904527286136874515672453627371412296400479321109300692571921463298146470999566861273610697581); _sage_const_1949109321593072906001054841716750182747736216904085685758649536576627200426803354086826316762038275064350706869717537438564468990307652007815404278792502274021551572842697725117953134652500111251312430241496762575917568028997710853285501202253526735815203057352682227152883490507116964168659768798266076911558426812297106501758788473887842518349530294000835534114694587996616832567588218684102577359627535428093902904111545005170568079374845154286152892487678592108873361536212452125796827743306575995950587411320602317856014990840237801757681628971684595630014775316952523180094159779823994805561232740898824590191 = Integer(1949109321593072906001054841716750182747736216904085685758649536576627200426803354086826316762038275064350706869717537438564468990307652007815404278792502274021551572842697725117953134652500111251312430241496762575917568028997710853285501202253526735815203057352682227152883490507116964168659768798266076911558426812297106501758788473887842518349530294000835534114694587996616832567588218684102577359627535428093902904111545005170568079374845154286152892487678592108873361536212452125796827743306575995950587411320602317856014990840237801757681628971684595630014775316952523180094159779823994805561232740898824590191); _sage_const_1723690041673310013599400680452119833766236057465450023626011005990088934059047221974215500637649897327077084750433404382695926530216206287417712025043159545875794590559201024798577043811394591906842135480430789384756393899942888030683709285183827188224788579590833174119184830383742330481715742267055087588770990379319946688903272383438855117880053021601240079064095884399048797560102027405079211545396108959326115440834338013165787501993831313062315131726229272315538492860924639365933179261381109861224261769051848425371748702463683512940368749640224531371539200997311612724114125682574118767402031611333814646631 = Integer(1723690041673310013599400680452119833766236057465450023626011005990088934059047221974215500637649897327077084750433404382695926530216206287417712025043159545875794590559201024798577043811394591906842135480430789384756393899942888030683709285183827188224788579590833174119184830383742330481715742267055087588770990379319946688903272383438855117880053021601240079064095884399048797560102027405079211545396108959326115440834338013165787501993831313062315131726229272315538492860924639365933179261381109861224261769051848425371748702463683512940368749640224531371539200997311612724114125682574118767402031611333814646631)
from Crypto.Random import get_random_bytes
from Crypto.Signature.pss import MGF1
from Crypto.Hash import SHA256
from Crypto.Util.strxor import strxor
from Crypto.Util.Padding import pad, unpad


BIT_LEN_PRIME = _sage_const_1024 #2048
BYTE_LEN_RANDOMNESS = _sage_const_128 
REDUNDANCY = _sage_const_10 


def keyGen():
    p = _sage_const_1 
    while p %_sage_const_4  != _sage_const_3 : 
        p = random_prime(_sage_const_2 **BIT_LEN_PRIME, proof = False, lbound = _sage_const_2 **(BIT_LEN_PRIME-_sage_const_1 )) #proof = False for performances
    q = _sage_const_1 
    while q % _sage_const_4  != _sage_const_3 : 
        q = random_prime(_sage_const_2 **BIT_LEN_PRIME, proof = False, lbound = _sage_const_2 **(BIT_LEN_PRIME-_sage_const_1 )) #proof = False for performances
    return (p, q, p*q)


def mgf(seed, length):
    #This function is correct and you don't need to look at it
    #It generates a mask of given length using the seed as input
    return MGF1(seed, length, SHA256)

def encrypt(m, n):
    BYTE_LEN_MESSAGE_PART = int(log(n,_sage_const_2 ))//_sage_const_8  - BYTE_LEN_RANDOMNESS
    if len(m) > BYTE_LEN_MESSAGE_PART - REDUNDANCY - _sage_const_1  :
        raise Exception("Message too long. Maximum " + str(BYTE_LEN_MESSAGE_PART - REDUNDANCY - _sage_const_1 ) + " bytes")
    m = pad(m, BYTE_LEN_MESSAGE_PART, style = 'iso7816')
    r = get_random_bytes(BYTE_LEN_RANDOMNESS)
    h = mgf(r, BYTE_LEN_MESSAGE_PART)
    m = strxor(m, h) + r
    return (int.from_bytes(m, 'little')**_sage_const_2 ) % n

def decrypt(c, p, q):
    P = GF(p)
    Q = GF(q)
    cp = P(c)
    cq = Q(c)
    xp = cp.sqrt(all=True)
    xq = cq.sqrt(all=True)
    x_tab = []

    for i in xp:
        for j in xq:
            x_tab.append(crt([i.lift(), j.lift()], [p,q]))
            
    for x in x_tab:
        xb = int(x).to_bytes((x.nbits() + _sage_const_7 ) // _sage_const_8 , byteorder='little')
       
        m_prime = xb[:-_sage_const_128 ]
        length_m = len(m_prime)
        r = xb[-_sage_const_128 :]

        h = mgf(r, length_m)
        M = strxor(m_prime,h)

        try:
            m = unpad(M, length_m, style='iso7816')
        except ValueError:
            # padding invalide — on passe simplement au suivant
            continue
    return m

def test():
    # Génération des clés
    print("Génération des clés...")
    p, q, n = keyGen()

    original_message = b"la crypto c'est rigolo"
    print("Message original :", original_message)


    # Chiffrement
    c = encrypt(original_message, n)
    print("Chiffrement terminé. Chiffre :", c)

    # Déchiffrement
    m = decrypt(c, p, q)
    print("Déchiffrement terminé. message :", m)


def break_encryption(tab_square, public_key):
    
    x = tab_square[_sage_const_0 ]

    for i in range(_sage_const_1 ,_sage_const_4 ):
        y  = tab_square[i]
        if(x != y or x != public_key - y):
            break

    p = gcd(x-y, public_key)
    q = public_key / p

    return [p,q]


def main():
    #test()
    roots = [_sage_const_3635799973808409611026462499791853056347787880401409846846897007394027540113672723180932404455112025261825058799881611289361506461931437343506657847258370039165636668020861611608939866398460475542081667812695583802631738720701449751571536827757098218966022321170840433823413609544310552632172896702650238675727192585205267978099032925253664406618596213525271931979397150216821867241355757444885551327113019508984098058818840197080615639994763731677416512808546290949494954067936918853234685463415933904385502839709839952776567297839382999157603133728424807260893761505964353739784806002565476997552890385088770586257 , _sage_const_9449293455061644130034467964572111063093263208106376095328599306321991490339662645115460783028457458390775108834224045745389139241355867569728535706420654890970655486515208889330439710301717180599762027291802822808167826432330531712507591279834459322632490997021726605793983183647693039323476767950476397389468983587140110174468850434852576325344271042771471537926071968033948289983503695564007169945862656055511234123343702866291955449954371421106982182169116313775969853284192212291642159375020916182553620532440566998772889629862867606563179920765675400050964094016736699362526488424536502396479405673274296875535 , _sage_const_72722541732948422043294541293089183164959988239906966657210349268352275440075783150806655737017959343422931402799253621857107502292878646436446373033860654646327644849581545067903796757450933928853514982454555297596242771909750116730749245771798107858268364553003553367869432847460707418805820268093010893253839660324489678816678674493384367919784210585648351935063005661630060961092937826703335808008533356377212241961280695888996283288172202782497742618467851042880478056624347488496635252829186794587016567118910702482014897423269267952492532861696012245436385304372601330045433038761644074520161187999313822046 , _sage_const_5886216022986182941051300006073347189910435315944873215138912648196316225666065705085335034310363392472372981437141688077884740281717308872658324232196145506451346463343928822789403640660707638986533874461561794303132330483538832077666803697849159211524737040403889725338439006950843194110109691515919169606995630662259331875186496184092296286645459039831847957881737823478756483703240875945824954426758169902904348306486143365100336093247779892212063411979037873869355377272879640926904109164434169072755134259849637748478337229446753875358069319898946605035506717815144946952787115460732669473446676476184840111324 ]
    n = _sage_const_9522015996794592552077762505865200246258223196346283061985809655590343765779738428266267438765475417734198040237023299367246246743648746216164982079454515545616983131364790434398343507059168114528615542274257378105764069204240281829238340525606257430490759361574730159161852616495153746742282588218569408282722823247464599853285529109345960693264055253357119889861134973695578350944596633390710505753871189411888446365304983562180951733242543623889479924787584164818850331340816559780138794627850102977140637099559477701254904527286136874515672453627371412296400479321109300692571921463298146470999566861273610697581 
    cipher_text_known = _sage_const_1949109321593072906001054841716750182747736216904085685758649536576627200426803354086826316762038275064350706869717537438564468990307652007815404278792502274021551572842697725117953134652500111251312430241496762575917568028997710853285501202253526735815203057352682227152883490507116964168659768798266076911558426812297106501758788473887842518349530294000835534114694587996616832567588218684102577359627535428093902904111545005170568079374845154286152892487678592108873361536212452125796827743306575995950587411320602317856014990840237801757681628971684595630014775316952523180094159779823994805561232740898824590191 
    plain_text_known  = b"Your heart's been aching but you're too shy to say it."
    challenge = _sage_const_1723690041673310013599400680452119833766236057465450023626011005990088934059047221974215500637649897327077084750433404382695926530216206287417712025043159545875794590559201024798577043811394591906842135480430789384756393899942888030683709285183827188224788579590833174119184830383742330481715742267055087588770990379319946688903272383438855117880053021601240079064095884399048797560102027405079211545396108959326115440834338013165787501993831313062315131726229272315538492860924639365933179261381109861224261769051848425371748702463683512940368749640224531371539200997311612724114125682574118767402031611333814646631 

    p,q  = break_encryption(roots, n)

    #print(plain_text_known)
    print(decrypt(challenge, p, q))


    

main()



